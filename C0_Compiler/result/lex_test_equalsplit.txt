28	CONSTYP	const	row:1	colmn:0
25	INTYP	int	row:1	colmn:1
2	IDEN	MaxN	row:1	colmn:2
5	ASSIGN	=	row:1	colmn:3
1	INT	100	row:1	colmn:4
9	SEMI	;	row:1	colmn:5
25	INTYP	int	row:2	colmn:0
2	IDEN	n	row:2	colmn:1
9	SEMI	;	row:2	colmn:2
25	INTYP	int	row:3	colmn:0
2	IDEN	s	row:3	colmn:1
9	SEMI	;	row:3	colmn:2
25	INTYP	int	row:4	colmn:0
2	IDEN	i	row:4	colmn:1
8	COMMA	,	row:4	colmn:2
2	IDEN	j	row:4	colmn:3
9	SEMI	;	row:4	colmn:4
25	INTYP	int	row:5	colmn:0
2	IDEN	dyn	row:5	colmn:1
13	LBRAK	[	row:5	colmn:2
1	INT	5050	row:5	colmn:3
14	RBRAK	]	row:5	colmn:4
9	SEMI	;	row:5	colmn:5
25	INTYP	int	row:6	colmn:0
2	IDEN	Mod	row:6	colmn:1
11	LPAR	(	row:6	colmn:2
25	INTYP	int	row:6	colmn:3
2	IDEN	a	row:6	colmn:4
8	COMMA	,	row:6	colmn:5
25	INTYP	int	row:6	colmn:6
2	IDEN	b	row:6	colmn:7
12	RPAR	)	row:6	colmn:8
6	LCURB	{	row:7	colmn:0
29	IFSY	if	row:8	colmn:0
11	LPAR	(	row:8	colmn:1
2	IDEN	a	row:8	colmn:2
20	LS	<	row:8	colmn:3
1	INT	0	row:8	colmn:4
12	RPAR	)	row:8	colmn:5
34	RETURNSY	return	row:8	colmn:6
11	LPAR	(	row:8	colmn:7
2	IDEN	a	row:8	colmn:8
15	PLUS	+	row:8	colmn:9
2	IDEN	b	row:8	colmn:10
12	RPAR	)	row:8	colmn:11
9	SEMI	;	row:8	colmn:12
34	RETURNSY	return	row:9	colmn:0
11	LPAR	(	row:9	colmn:1
2	IDEN	Mod	row:9	colmn:2
11	LPAR	(	row:9	colmn:3
2	IDEN	a	row:9	colmn:4
16	MINUS	-	row:9	colmn:5
2	IDEN	b	row:9	colmn:6
8	COMMA	,	row:9	colmn:7
2	IDEN	b	row:9	colmn:8
12	RPAR	)	row:9	colmn:9
12	RPAR	)	row:9	colmn:10
9	SEMI	;	row:9	colmn:11
7	RCURB	}	row:10	colmn:0
27	NOTYP	void	row:11	colmn:0
37	MAINFUNC	main	row:11	colmn:1
11	LPAR	(	row:11	colmn:2
12	RPAR	)	row:11	colmn:3
6	LCURB	{	row:12	colmn:0
36	SCANFUNC	scanf	row:13	colmn:0
11	LPAR	(	row:13	colmn:1
2	IDEN	n	row:13	colmn:2
12	RPAR	)	row:13	colmn:3
9	SEMI	;	row:13	colmn:4
29	IFSY	if	row:14	colmn:0
11	LPAR	(	row:14	colmn:1
2	IDEN	n	row:14	colmn:2
20	LS	<	row:14	colmn:3
1	INT	0	row:14	colmn:4
12	RPAR	)	row:14	colmn:5
6	LCURB	{	row:15	colmn:0
35	PRINTFUNC	printf	row:16	colmn:0
11	LPAR	(	row:16	colmn:1
4	STR	"n should be bigger or equal to zero"	row:16	colmn:2
12	RPAR	)	row:16	colmn:3
9	SEMI	;	row:16	colmn:4
7	RCURB	}	row:17	colmn:0
29	IFSY	if	row:18	colmn:0
11	LPAR	(	row:18	colmn:1
2	IDEN	n	row:18	colmn:2
19	GT	>	row:18	colmn:3
2	IDEN	MaxN	row:18	colmn:4
12	RPAR	)	row:18	colmn:5
6	LCURB	{	row:19	colmn:0
35	PRINTFUNC	printf	row:20	colmn:0
11	LPAR	(	row:20	colmn:1
4	STR	"n should be less or equal than"	row:20	colmn:2
8	COMMA	,	row:20	colmn:3
2	IDEN	MaxN	row:20	colmn:4
12	RPAR	)	row:20	colmn:5
9	SEMI	;	row:20	colmn:6
7	RCURB	}	row:21	colmn:0
2	IDEN	s	row:22	colmn:0
5	ASSIGN	=	row:22	colmn:1
2	IDEN	n	row:22	colmn:2
17	STAR	*	row:22	colmn:3
11	LPAR	(	row:22	colmn:4
2	IDEN	n	row:22	colmn:5
15	PLUS	+	row:22	colmn:6
1	INT	1	row:22	colmn:7
12	RPAR	)	row:22	colmn:8
9	SEMI	;	row:22	colmn:9
29	IFSY	if	row:23	colmn:0
11	LPAR	(	row:23	colmn:1
2	IDEN	Mod	row:23	colmn:2
11	LPAR	(	row:23	colmn:3
2	IDEN	s	row:23	colmn:4
8	COMMA	,	row:23	colmn:5
1	INT	4	row:23	colmn:6
12	RPAR	)	row:23	colmn:7
24	NEQU	!=	row:23	colmn:8
1	INT	0	row:23	colmn:9
12	RPAR	)	row:23	colmn:10
6	LCURB	{	row:24	colmn:0
35	PRINTFUNC	printf	row:25	colmn:0
11	LPAR	(	row:25	colmn:1
1	INT	0	row:25	colmn:2
12	RPAR	)	row:25	colmn:3
9	SEMI	;	row:25	colmn:4
34	RETURNSY	return	row:26	colmn:0
9	SEMI	;	row:26	colmn:1
7	RCURB	}	row:27	colmn:0
2	IDEN	s	row:28	colmn:0
5	ASSIGN	=	row:28	colmn:1
2	IDEN	s	row:28	colmn:2
18	DIV	/	row:28	colmn:3
1	INT	4	row:28	colmn:4
9	SEMI	;	row:28	colmn:5
2	IDEN	dyn	row:29	colmn:0
13	LBRAK	[	row:29	colmn:1
15	PLUS	+	row:29	colmn:2
1	INT	0	row:29	colmn:3
16	MINUS	-	row:29	colmn:4
1	INT	1	row:29	colmn:5
15	PLUS	+	row:29	colmn:6
1	INT	2	row:29	colmn:7
14	RBRAK	]	row:29	colmn:8
5	ASSIGN	=	row:29	colmn:9
1	INT	1	row:29	colmn:10
9	SEMI	;	row:29	colmn:11
2	IDEN	i	row:30	colmn:0
5	ASSIGN	=	row:30	colmn:1
1	INT	1	row:30	colmn:2
9	SEMI	;	row:30	colmn:3
30	DOSY	do	row:32	colmn:0
6	LCURB	{	row:32	colmn:1
2	IDEN	j	row:33	colmn:0
5	ASSIGN	=	row:33	colmn:1
2	IDEN	s	row:33	colmn:2
9	SEMI	;	row:33	colmn:3
30	DOSY	do	row:35	colmn:0
6	LCURB	{	row:35	colmn:1
29	IFSY	if	row:36	colmn:0
11	LPAR	(	row:36	colmn:1
2	IDEN	j	row:36	colmn:2
16	MINUS	-	row:36	colmn:3
2	IDEN	i	row:36	colmn:4
19	GT	>	row:36	colmn:5
1	INT	0	row:36	colmn:6
12	RPAR	)	row:36	colmn:7
6	LCURB	{	row:37	colmn:0
2	IDEN	dyn	row:38	colmn:0
13	LBRAK	[	row:38	colmn:1
2	IDEN	j	row:38	colmn:2
14	RBRAK	]	row:38	colmn:3
5	ASSIGN	=	row:38	colmn:4
2	IDEN	dyn	row:38	colmn:5
13	LBRAK	[	row:38	colmn:6
2	IDEN	j	row:38	colmn:7
14	RBRAK	]	row:38	colmn:8
15	PLUS	+	row:38	colmn:9
2	IDEN	dyn	row:38	colmn:10
13	LBRAK	[	row:38	colmn:11
2	IDEN	j	row:38	colmn:12
16	MINUS	-	row:38	colmn:13
2	IDEN	i	row:38	colmn:14
14	RBRAK	]	row:38	colmn:15
9	SEMI	;	row:38	colmn:16
7	RCURB	}	row:39	colmn:0
2	IDEN	j	row:40	colmn:0
5	ASSIGN	=	row:40	colmn:1
2	IDEN	j	row:40	colmn:2
16	MINUS	-	row:40	colmn:3
1	INT	1	row:40	colmn:4
9	SEMI	;	row:40	colmn:5
7	RCURB	}	row:41	colmn:0
31	WHILESY	while	row:41	colmn:1
11	LPAR	(	row:41	colmn:2
2	IDEN	j	row:41	colmn:3
21	GTEQU	>=	row:41	colmn:4
2	IDEN	i	row:41	colmn:5
12	RPAR	)	row:41	colmn:6
2	IDEN	i	row:42	colmn:0
5	ASSIGN	=	row:42	colmn:1
2	IDEN	i	row:42	colmn:2
15	PLUS	+	row:42	colmn:3
1	INT	1	row:42	colmn:4
9	SEMI	;	row:42	colmn:5
7	RCURB	}	row:43	colmn:0
31	WHILESY	while	row:43	colmn:1
11	LPAR	(	row:43	colmn:2
2	IDEN	i	row:43	colmn:3
22	LSEQU	<=	row:43	colmn:4
2	IDEN	n	row:43	colmn:5
12	RPAR	)	row:43	colmn:6
35	PRINTFUNC	printf	row:44	colmn:0
11	LPAR	(	row:44	colmn:1
2	IDEN	dyn	row:44	colmn:2
13	LBRAK	[	row:44	colmn:3
2	IDEN	s	row:44	colmn:4
14	RBRAK	]	row:44	colmn:5
18	DIV	/	row:44	colmn:6
1	INT	2	row:44	colmn:7
12	RPAR	)	row:44	colmn:8
9	SEMI	;	row:44	colmn:9
7	RCURB	}	row:45	colmn:0
39	ENDOFINPUT	ÿ	row:45	colmn:1
39	ENDOFINPUT	ÿ	row:45	colmn:2
