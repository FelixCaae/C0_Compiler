<program>
  <varDeclGroup>
    <varDecl>
      <type>
      <keyword> char <\keyword>
      <\type>
    <identifier> op <\identifier>
    <\varDecl>
  <seperator> ; <\seperator>
  <\varDeclGroup>
  <funcDecl>
  <keyword> void <\keyword>
  <keyword> main <\keyword>
    <paramList>
    <seperator> ( <\seperator>
    <seperator> ) <\seperator>
    <\paramList>
  <seperator> { <\seperator>
    <compoundStatement>
      <statements>
        <statement>
        <identifier> op <\identifier>
          <assignStat>
          <seperator> = <\seperator>
            <expression>
              <term>
                <factor>
                <char> '_' <\char>
                <\factor>
              <\term>
            <\expression>
          <\assignStat>
        <seperator> ; <\seperator>
        <\statement>
        <statement>
          <writeStat>
          <keyword> printf <\keyword>
          <seperator> ( <\seperator>
            <expression>
              <term>
                <factor>
                <identifier> op <\identifier>
                <\factor>
              <\term>
            <\expression>
          <seperator> ) <\seperator>
          <\writeStat>
        <seperator> ; <\seperator>
        <\statement>
        <statement>
        <identifier> op <\identifier>
          <assignStat>
          <seperator> = <\seperator>
            <expression>
              <term>
                <factor>
                <char> '+' <\char>
                <\factor>
              <\term>
            <\expression>
          <\assignStat>
        <seperator> ; <\seperator>
        <\statement>
        <statement>
          <writeStat>
          <keyword> printf <\keyword>
          <seperator> ( <\seperator>
            <expression>
              <term>
                <factor>
                <identifier> op <\identifier>
                <\factor>
              <\term>
            <\expression>
          <seperator> ) <\seperator>
          <\writeStat>
        <seperator> ; <\seperator>
        <\statement>
        <statement>
        <identifier> op <\identifier>
          <assignStat>
          <seperator> = <\seperator>
            <expression>
              <term>
                <factor>
                <char> '*' <\char>
                <\factor>
              <\term>
            <\expression>
          <\assignStat>
        <seperator> ; <\seperator>
        <\statement>
        <statement>
          <writeStat>
          <keyword> printf <\keyword>
          <seperator> ( <\seperator>
            <expression>
              <term>
                <factor>
                <identifier> op <\identifier>
                <\factor>
              <\term>
            <\expression>
          <seperator> ) <\seperator>
          <\writeStat>
        <seperator> ; <\seperator>
        <\statement>
        <statement>
        <identifier> op <\identifier>
          <assignStat>
          <seperator> = <\seperator>
            <expression>
              <term>
                <factor>
                <char> '/' <\char>
                <\factor>
              <\term>
            <\expression>
          <\assignStat>
        <seperator> ; <\seperator>
        <\statement>
        <statement>
          <writeStat>
          <keyword> printf <\keyword>
          <seperator> ( <\seperator>
            <expression>
              <term>
                <factor>
                <identifier> op <\identifier>
                <\factor>
              <\term>
            <\expression>
          <seperator> ) <\seperator>
          <\writeStat>
        <seperator> ; <\seperator>
        <\statement>
      <\statements>
    <\compoundStatement>
  <seperator> } <\seperator>
  <\funcDecl>
<\program>
<end> ÿ <\end>
