<program>
  <funcDecl>
  <keyword> void <\keyword>
  <identifier> test_hw <\identifier>
    <paramList>
    <seperator> ( <\seperator>
    <seperator> ) <\seperator>
    <\paramList>
  <seperator> { <\seperator>
    <compoundStatement>
      <statements>
        <statement>
          <writeStat>
          <keyword> printf <\keyword>
          <seperator> ( <\seperator>
          <string> "HelloWorld!This is the first test program written with C0 grammar!\n" <\string>
          <seperator> ) <\seperator>
          <\writeStat>
        <seperator> ; <\seperator>
        <\statement>
      <\statements>
    <\compoundStatement>
  <seperator> } <\seperator>
  <\funcDecl>
  <funcDecl>
  <keyword> void <\keyword>
  <identifier> test_sp <\identifier>
    <paramList>
    <seperator> ( <\seperator>
    <seperator> ) <\seperator>
    <\paramList>
  <seperator> { <\seperator>
    <compoundStatement>
      <varDeclGroup>
        <varDecl>
          <type>
          <keyword> int <\keyword>
          <\type>
        <identifier> i <\identifier>
        <\varDecl>
      <seperator> ; <\seperator>
        <varDecl>
          <type>
          <keyword> char <\keyword>
          <\type>
        <identifier> c <\identifier>
        <\varDecl>
      <seperator> ; <\seperator>
      <\varDeclGroup>
      <statements>
        <statement>
        <identifier> i <\identifier>
          <assignStat>
          <seperator> = <\seperator>
            <expression>
              <term>
                <factor>
                <unsignedInt> 55 <\unsignedInt>
                <\factor>
              <\term>
            <\expression>
          <\assignStat>
        <seperator> ; <\seperator>
        <\statement>
        <statement>
          <loopStat>
          <keyword> do <\keyword>
            <statement>
            <seperator> { <\seperator>
              <statements>
                <statement>
                <identifier> c <\identifier>
                  <assignStat>
                  <seperator> = <\seperator>
                    <expression>
                      <term>
                        <factor>
                        <identifier> i <\identifier>
                        <\factor>
                      <\term>
                    <\expression>
                  <\assignStat>
                <seperator> ; <\seperator>
                <\statement>
                <statement>
                <identifier> i <\identifier>
                  <assignStat>
                  <seperator> = <\seperator>
                    <expression>
                      <term>
                        <factor>
                        <identifier> i <\identifier>
                        <\factor>
                      <\term>
                    <seperator> + <\seperator>
                      <term>
                        <factor>
                        <unsignedInt> 1 <\unsignedInt>
                        <\factor>
                      <\term>
                    <\expression>
                  <\assignStat>
                <seperator> ; <\seperator>
                <\statement>
                <statement>
                  <writeStat>
                  <keyword> printf <\keyword>
                  <seperator> ( <\seperator>
                    <expression>
                      <term>
                        <factor>
                        <identifier> c <\identifier>
                        <\factor>
                      <\term>
                    <\expression>
                  <seperator> ) <\seperator>
                  <\writeStat>
                <seperator> ; <\seperator>
                <\statement>
              <\statements>
            <seperator> } <\seperator>
            <\statement>
          <keyword> while <\keyword>
          <seperator> ( <\seperator>
            <condition>
              <expression>
                <term>
                  <factor>
                  <identifier> i <\identifier>
                  <\factor>
                <\term>
              <\expression>
              <identifier>
              <seperator> != <\seperator>
              <\identifier>
              <expression>
                <term>
                  <factor>
                  <unsignedInt> 128 <\unsignedInt>
                  <\factor>
                <\term>
              <\expression>
            <\condition>
          <seperator> ) <\seperator>
          <\loopStat>
        <\statement>
      <\statements>
    <\compoundStatement>
  <seperator> } <\seperator>
  <\funcDecl>
  <funcDecl>
    <type>
    <keyword> int <\keyword>
    <\type>
  <identifier> get10 <\identifier>
    <paramList>
    <seperator> ( <\seperator>
    <seperator> ) <\seperator>
    <\paramList>
  <seperator> { <\seperator>
    <compoundStatement>
      <statements>
        <statement>
          <returnStat>
          <keyword> return <\keyword>
          <seperator> ( <\seperator>
            <expression>
              <term>
                <factor>
                <unsignedInt> 10 <\unsignedInt>
                <\factor>
              <\term>
            <\expression>
          <seperator> ) <\seperator>
          <\returnStat>
        <seperator> ; <\seperator>
        <\statement>
      <\statements>
    <\compoundStatement>
  <seperator> } <\seperator>
  <\funcDecl>
  <funcDecl>
  <keyword> void <\keyword>
  <identifier> test_condition <\identifier>
    <paramList>
    <seperator> ( <\seperator>
    <seperator> ) <\seperator>
    <\paramList>
  <seperator> { <\seperator>
    <compoundStatement>
      <constDeclGroup>
      <keyword> const <\keyword>
        <constDecl>
          <type>
          <keyword> char <\keyword>
          <\type>
        <identifier> ch <\identifier>
        <seperator> = <\seperator>
        <char> 'a' <\char>
        <\constDecl>
      <seperator> ; <\seperator>
      <keyword> const <\keyword>
        <constDecl>
          <type>
          <keyword> int <\keyword>
          <\type>
        <identifier> a <\identifier>
        <seperator> = <\seperator>
        <unsignedInt> 1 <\unsignedInt>
        <seperator> , <\seperator>
        <identifier> b <\identifier>
        <seperator> = <\seperator>
        <unsignedInt> 0 <\unsignedInt>
        <\constDecl>
      <seperator> ; <\seperator>
      <\constDeclGroup>
      <varDeclGroup>
        <varDecl>
          <type>
          <keyword> int <\keyword>
          <\type>
        <identifier> num <\identifier>
        <\varDecl>
      <seperator> ; <\seperator>
        <varDecl>
          <type>
          <keyword> char <\keyword>
          <\type>
        <identifier> ch2 <\identifier>
        <\varDecl>
      <seperator> ; <\seperator>
      <\varDeclGroup>
      <statements>
        <statement>
        <identifier> num <\identifier>
          <assignStat>
          <seperator> = <\seperator>
            <expression>
            <seperator> - <\seperator>
              <term>
                <factor>
                <unsignedInt> 1 <\unsignedInt>
                <\factor>
              <\term>
            <\expression>
          <\assignStat>
        <seperator> ; <\seperator>
        <\statement>
        <statement>
        <identifier> ch <\identifier>
          <assignStat>
