<program>
  <varDeclGroup>
    <varDecl>
      <type>
      <keyword> int <\keyword>
      <\type>
    <identifier> array <\identifier>
    <seperator> [ <\seperator>
    <unsignedInt> 100 <\unsignedInt>
    <seperator> ] <\seperator>
    <\varDecl>
  <seperator> ; <\seperator>
  <\varDeclGroup>
  <funcDecl>
  <keyword> void <\keyword>
  <identifier> init <\identifier>
    <paramList>
    <seperator> ( <\seperator>
    <seperator> ) <\seperator>
    <\paramList>
  <seperator> { <\seperator>
    <compoundStatement>
      <varDeclGroup>
        <varDecl>
          <type>
          <keyword> int <\keyword>
          <\type>
        <identifier> i <\identifier>
        <\varDecl>
      <seperator> ; <\seperator>
      <\varDeclGroup>
      <statements>
        <statement>
        <identifier> i <\identifier>
          <assignStat>
          <seperator> = <\seperator>
            <expression>
              <term>
                <factor>
                <unsignedInt> 0 <\unsignedInt>
                <\factor>
              <\term>
            <\expression>
          <\assignStat>
        <seperator> ; <\seperator>
        <\statement>
        <statement>
          <loopStat>
          <keyword> do <\keyword>
            <statement>
            <seperator> { <\seperator>
              <statements>
                <statement>
                <identifier> array <\identifier>
                  <assignStat>
                  <seperator> [ <\seperator>
                    <expression>
                      <term>
                        <factor>
                        <identifier> i <\identifier>
                        <\factor>
                      <\term>
                    <\expression>
                  <seperator> ] <\seperator>
                  <seperator> = <\seperator>
                    <expression>
                      <term>
                        <factor>
                        <identifier> i <\identifier>
                        <\factor>
                      <seperator> * <\seperator>
                        <factor>
                        <identifier> i <\identifier>
                        <\factor>
                      <\term>
                    <\expression>
                  <\assignStat>
                <seperator> ; <\seperator>
                <\statement>
                <statement>
                <identifier> i <\identifier>
                  <assignStat>
                  <seperator> = <\seperator>
                    <expression>
                      <term>
                        <factor>
                        <identifier> i <\identifier>
                        <\factor>
                      <\term>
                    <seperator> + <\seperator>
                      <term>
                        <factor>
                        <unsignedInt> 1 <\unsignedInt>
                        <\factor>
                      <\term>
                    <\expression>
                  <\assignStat>
                <seperator> ; <\seperator>
                <\statement>
              <\statements>
            <seperator> } <\seperator>
            <\statement>
          <keyword> while <\keyword>
          <seperator> ( <\seperator>
            <condition>
              <expression>
                <term>
                  <factor>
                  <identifier> i <\identifier>
                  <\factor>
                <\term>
              <\expression>
              <identifier>
              <seperator> != <\seperator>
              <\identifier>
              <expression>
                <term>
                  <factor>
                  <unsignedInt> 100 <\unsignedInt>
                  <\factor>
                <\term>
              <\expression>
            <\condition>
          <seperator> ) <\seperator>
          <\loopStat>
        <\statement>
      <\statements>
    <\compoundStatement>
  <seperator> } <\seperator>
  <\funcDecl>
  <funcDecl>
  <keyword> void <\keyword>
  <identifier> output <\identifier>
    <paramList>
    <seperator> ( <\seperator>
      <type>
      <keyword> int <\keyword>
      <\type>
    <identifier> index <\identifier>
    <seperator> ) <\seperator>
    <\paramList>
  <seperator> { <\seperator>
    <compoundStatement>
      <statements>
        <statement>
          <writeStat>
          <keyword> printf <\keyword>
          <seperator> ( <\seperator>
          <string> "Square:" <\string>
          <seperator> , <\seperator>
            <expression>
              <term>
                <factor>
                <identifier> array <\identifier>
                <seperator> [ <\seperator>
                  <expression>
                    <term>
                      <factor>
                      <identifier> index <\identifier>
                      <\factor>
                    <\term>
                  <\expression>
                <seperator> ] <\seperator>
                <\factor>
              <\term>
            <\expression>
          <seperator> ) <\seperator>
          <\writeStat>
        <seperator> ; <\seperator>
        <\statement>
      <\statements>
    <\compoundStatement>
  <seperator> } <\seperator>
  <\funcDecl>
  <funcDecl>
  <keyword> void <\keyword>
  <keyword> main <\keyword>
    <paramList>
    <seperator> ( <\seperator>
    <seperator> ) <\seperator>
    <\paramList>
  <seperator> { <\seperator>
    <compoundStatement>
      <varDeclGroup>
        <varDecl>
          <type>
          <keyword> int <\keyword>
          <\type>
        <identifier> input <\identifier>
        <\varDecl>
      <seperator> ; <\seperator>
      <\varDeclGroup>
      <statements>
        <statement>
          <readStat>
          <keyword> scanf <\keyword>
          <seperator> ( <\seperator>
          <identifier> input <\identifier>
          <seperator> ) <\seperator>
          <\readStat>
        <seperator> ; <\seperator>
        <\statement>
        <statement>
        <identifier> init <\identifier>
          <funCallStat>
          <seperator> ( <\seperator>
            <argumentList>
            <\argumentList>
          <seperator> ) <\seperator>
          <\funCallStat>
        <seperator> ; <\seperator>
        <\statement>
        <statement>
        <identifier> output <\identifier>
          <funCallStat>
          <seperator> ( <\seperator>
            <argumentList>
              <expression>
                <term>
                  <factor>
                  <identifier> input <\identifier>
                  <\factor>
                <\term>
              <\expression>
            <\argumentList>
          <seperator> ) <\seperator>
          <\funCallStat>
        <seperator> ; <\seperator>
        <\statement>
      <\statements>
    <\compoundStatement>
  <seperator> } <\seperator>
  <\funcDecl>
<\program>
<end> ÿ <\end>
